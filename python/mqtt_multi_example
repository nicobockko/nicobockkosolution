import sys
import paho.mqtt.client as mqtt
import WorkerThread
from QLed import QLed
from PyQt5.QtWidgets import *
from PyQt5 import uic
from PyQt5.QtCore import QTimer
from functools import partial

# 과제 2 퍼블리시 한다음에 리턴값 잘 오는지 체크는 어쩌지....
# 과제 3 운영과정에서 오류 (리턴이 안오던지) (컨넥션이 끊겼다던지) 확인을 위해 로그를 txt 로그를 남기도록 한다 퍼블리시 마다, listen마다

# 모든 슬레이브 들은 Topic+Master 에다가 퍼블리시를 할것이다
Topic = "hc/ys/gz/"
Master = "master"
# room마다 명령을 명령내릴때 Topic +Room+ str(룸번호) 에다 명령 내릴 것이다..
Room = "room"

form_class = uic.loadUiType("C:/Users/이현주/Desktop/LED_UI_ Practice.ui")[0]


class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        # self.setFixedSize(820,880)
        # 함수연결
        self.upper_on1.clicked.connect(partial(self.pub_uon, 1))
        self.upper_off1.clicked.connect(partial(self.pub_uoff, 1))
        self.lower_onoff1.clicked.connect(partial(self.pub_lonoff, 1))
        self.led1 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status1.addWidget(self.led1)

        self.upper_on2.clicked.connect(partial(self.pub_uon, 2))
        self.upper_off2.clicked.connect(partial(self.pub_uoff, 2))
        self.lower_onoff2.clicked.connect(partial(self.pub_lonoff, 2))
        self.led2 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status2.addWidget(self.led2)

        self.upper_on3.clicked.connect(partial(self.pub_uon, 3))
        self.upper_off3.clicked.connect(partial(self.pub_uoff, 3))
        self.lower_onoff3.clicked.connect(partial(self.pub_lonoff, 3))
        self.led3 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status3.addWidget(self.led3)

        self.upper_on4.clicked.connect(partial(self.pub_uon, 4))
        self.upper_off4.clicked.connect(partial(self.pub_uoff, 4))
        self.lower_onoff4.clicked.connect(partial(self.pub_lonoff, 4))
        self.led4 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status4.addWidget(self.led4)

        self.upper_on5.clicked.connect(partial(self.pub_uon, 5))
        self.upper_off5.clicked.connect(partial(self.pub_uoff, 5))
        self.lower_onoff5.clicked.connect(partial(self.pub_lonoff, 5))
        self.led5 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status5.addWidget(self.led5)

        self.upper_on6.clicked.connect(partial(self.pub_uon, 6))
        self.upper_off6.clicked.connect(partial(self.pub_uoff, 6))
        self.lower_onoff6.clicked.connect(partial(self.pub_lonoff, 6))
        self.led6 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status6.addWidget(self.led6)


    def pub_uon(self, num):
        client.publish(Topic + Room + str(num), "upper_on",qos=2)
        print(Topic + Room + str(num), "upper_on")

    def pub_uoff(self, num):
        client.publish(Topic + Room + str(num), "upper_off")
        print(Topic + Room + str(num), "upper_off")

    def pub_lonoff(self, num):
        client.publish(Topic + Room + str(num), "lower_onoff")
        print(Topic + Room + str(num), "lower_onoff")


def on_connect(client, userdata, flags, rc):
    if rc == 0 : print("connected OK")
    else : print("Bad connection Returned code=", rc)
def on_disconnect(client, userdata, flags, rc=0): print(str(rc))
def on_publish(client, userdata, mid): print("In on_pub callback mid= ", mid)
def on_subscribe(client, userdata, mid, granted_qos): print("subscribed: " + str(mid) + " " + str(granted_qos))

timers = [QTimer(), QTimer(), QTimer(), QTimer(), QTimer(), QTimer()]

def turn_off_led(num):
    print("valval",num)
    myWindow.led1.value = True
    # myWindow.eval('led%s' % num).value = False

for t in range(len(timers)):
    print("connecting",t)
    timers[t].timeout.connect(lambda: print("아놔이런왜안돼"))#
    # timers[t].timeout.connect(lambda: turn_off_led(0))#turn_off_led(i+1))
    timers[t].setSingleShot(True)

def _on_btn(num):
    print("Timer Reset")
    timers[num].start(1000)


def on_message(client, userdata, msg):
    str_msg = str(msg.payload.decode("utf-8"))
    if "room1_is_left_connected" in str_msg:
        # myWindow.led1.value = True
        _on_btn(0)
        print("onbtn")

    elif "room2_is_left_connected" in str_msg:
        print("led2 timer 업데이트 ")
    elif "room3_is_left_connected" in str_msg:
        print("led3 timer 업데이트 ")
    elif "room4_is_left_connected" in str_msg:
        print("led4 timer 업데이트 ")
    elif "room5_is_left_connected" in str_msg:
        print("led5 timer 업데이트 ")
    elif "room6_is_left_connected" in str_msg:
        print("led6 timer 업데이트 ")
    print(str_msg,end=' ' )
    print("//read done")


def mqtt_loop(stop_obj, args):
    global client  # 이방법맞냐;;
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    client.on_publish = on_publish
    client.on_subscribe = on_subscribe
    client.on_message = on_message
    client.username_pw_set('nicobockko_choIoT', '1234')
    client.connect('broker.mqttdashboard.com', 1883)
    print("done")
    client.subscribe(Topic+Master, 2)
    # client.subscribe(Topic+Room+str(1), 2)
    client.loop_forever()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    myWindow = MyWindow()
    myWindow.setWindowTitle("gzone_control")
    myWindow.show()

    # WorkerThread
    W0 = WorkerThread.create_worker(0)
    WorkerThread.start_worker(*W0, mqtt_loop, None,
                              _finished_func=lambda: print("Finished"))

    app.exec_()
