import sys
import os
import paho.mqtt.client as mqtt
import WorkerThread
import datetime
from QLed import QLed
from PyQt5.QtWidgets import *
from PyQt5.QtWidgets import QMessageBox,QTableWidgetItem,QShortcut
from PyQt5 import uic
# from PyQt5.QtGui import QPixmap, QIcon,QKeySequence
from PyQt5.QtCore import Qt

from functools import partial

# 과제 1 타이머 수행하기 해서 led 업데이트 하기 8초설정)
# 과제 2 퍼블리시 한다음에 리턴값 잘 오는지 체크는 어쩌지....
# 과제 3 운영과정에서 오류 (리턴이 안오던지) (컨넥션이 끊겼다던지) 확인을 위해 로그를 txt 로그를 남기도록 한다 퍼블리시 마다, listen마다
# 과제 4 client를 클래스정의? 같은거 안하고 global 쓰면되는지

# 모든 슬레이브 들은 Topic+Master 에다가 퍼블리시를 할것이다
Topic = "hc/ys/gz/"
Master = "master"
# room마다 병령을 명령내릴때 Topic +Room+ str(룸번호) 에다 명령 내릴 것이다..
Room = "room"

form_class = uic.loadUiType("C:/Users/junsik0914.choi/LED_UI_ Practice.ui")[0]
# def createDirectory(directory):
#     try:
#         if not os.path.exists(directory):
#             os.makedirs(directory)
#     except OSError:
#        show_msgbox('디랙토리 생성 실패')
#
# def show_msgbox(msg):
#     myicon = QPixmap()
#     myicon.load('C:/QCA410/UI/erricon.png')
#     error_dlg = QMessageBox()
#     error_dlg.setText(msg)
#     error_dlg.setWindowTitle('Surprise~!')
#     error_dlg.setWindowIcon(QIcon(myicon))
#     error_dlg.setIconPixmap(myicon)
#     error_dlg.exec()
# def show_question():
#     error_dlg = QMessageBox()
#     result = error_dlg.question(error_dlg,'save to csv', '정말 저장하시겠습니까? \n 저장 후 화면 Data는 사라집니다',
#                     QMessageBox.Yes | QMessageBox.No)
#     if result == QMessageBox.Yes:
#         print("yes")
#         myWindow.saving()
#         myWindow.pltvertical.removeWidget(myWindow.p)
#         myWindow.pltvertical.addWidget(myWindow.p)
#
#     else:
#         print('pass')

class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        # self.setFixedSize(820,880)
        #함수연결
        self.upper_on1.clicked.connect(partial(self.pub_uon,1))
        self.upper_off1.clicked.connect(partial(self.pub_uoff,1))
        self.lower_onoff1.clicked.connect(partial(self.pub_lonoff,1))
        self.led1=QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status1.addWidget(self.led1)
        
        self.upper_on2.clicked.connect(partial(self.pub_uon,2))
        self.upper_off2.clicked.connect(partial(self.pub_uoff,2))
        self.lower_onoff2.clicked.connect(partial(self.pub_lonoff,2))
        self.led2=QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status2.addWidget(self.led2)
        
        self.upper_on3.clicked.connect(partial(self.pub_uon,3))
        self.upper_off3.clicked.connect(partial(self.pub_uoff,3))
        self.lower_onoff3.clicked.connect(partial(self.pub_lonoff,3))
        self.led3=QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status3.addWidget(self.led3)
        
        self.upper_on4.clicked.connect(partial(self.pub_uon,4))
        self.upper_off4.clicked.connect(partial(self.pub_uoff,4))
        self.lower_onoff4.clicked.connect(partial(self.pub_lonoff,4))
        self.led4=QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status4.addWidget(self.led4)
        
        self.upper_on5.clicked.connect(partial(self.pub_uon,5))
        self.upper_off5.clicked.connect(partial(self.pub_uoff,5))
        self.lower_onoff5.clicked.connect(partial(self.pub_lonoff,5))
        self.led5=QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status5.addWidget(self.led5)
        
        self.upper_on6.clicked.connect(partial(self.pub_uon,6))
        self.upper_off6.clicked.connect(partial(self.pub_uoff,6))
        self.lower_onoff6.clicked.connect(partial(self.pub_lonoff,6))
        self.led6=QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status6.addWidget(self.led6)
        

    def pub_uon(self,num):
        client.publish(Topic+Room+str(num),"upper_on")
        print(Topic+Room+str(num),"upper_on")

    def pub_uoff(self,num):
        client.publish(Topic+Room+str(num),"upper_off")
        print(Topic+Room+str(num),"upper_off")

    def pub_lonoff(self,num):
        client.publish(Topic+Room+str(num),"lower_onoff")
        print(Topic+Room+str(num),"lower_onoff")

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("connected OK")
    else:
        print("Bad connection Returned code=", rc)

def on_disconnect(client, userdata, flags, rc=0):
    print(str(rc))

def on_publish(client, userdata, mid):
    print("In on_pub callback mid= ", mid)

def on_subscribe(client, userdata, mid, granted_qos):
    print("subscribed: " + str(mid) + " " + str(granted_qos))

def on_message(client, userdata, msg):
    #str_msg = str(msg.payload)
    str_msg = str(msg.payload.decode("utf-8"))
    if "room1_connected" in str_msg :
        print("led1 timer 업데이트")
    elif "room2_connected" in str_msg :
        print("led2 timer 업데이트 ")
    elif "room3_connected" in str_msg:
        print("led3 timer 업데이트 ")
    elif "room4_connected" in str_msg:
        print("led4 timer 업데이트 ")
    elif "room5_connected" in str_msg:
        print("led5 timer 업데이트 ")
    elif "room6_connected" in str_msg:
        print("led6 timer 업데이트 ")

    print("read done")

def mqtt_loop(stop_obj, args):
    global client  #이방법맞냐;;
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    client.on_publish = on_publish
    client.on_subscribe = on_subscribe
    client.on_message = on_message
    client.username_pw_set('nicobockko_choIoT', '1234')
    print("connect")
    # client.connect('test.mosquitto.org', 1883)
    client.connect('11.99.54.216', 1883)
    print("done")
    # client.subscribe(Topic+Master, 2)
    client.subscribe(Topic+Room+str(1), 2)
    client.loop_forever()



if __name__ == "__main__":

    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    myWindow = MyWindow()
    myWindow.setWindowTitle("gzone_control")
    myWindow.show()

    # WorkerThread
    W0 = WorkerThread.create_worker(0)
    WorkerThread.start_worker(*W0, mqtt_loop, None,
                              _finished_func=lambda: print("Finished"))

    app.exec_()



import sys
import paho.mqtt.client as mqtt
import WorkerThread
from QLed import QLed
from PyQt5.QtWidgets import *
from PyQt5 import uic
from PyQt5.QtCore import QTimer
from functools import partial

# 과제 2 퍼블리시 한다음에 리턴값 잘 오는지 체크는 어쩌지....
# 과제 3 운영과정에서 오류 (리턴이 안오던지) (컨넥션이 끊겼다던지) 확인을 위해 로그를 txt 로그를 남기도록 한다 퍼블리시 마다, listen마다

# 모든 슬레이브 들은 Topic+Master 에다가 퍼블리시를 할것이다
Topic = "hc/ys/gz/"
Master = "master"
# room마다 명령을 명령내릴때 Topic +Room+ str(룸번호) 에다 명령 내릴 것이다..
Room = "room"

form_class = uic.loadUiType("C:/Users/이현주/Desktop/LED_UI_ Practice.ui")[0]


class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        # self.setFixedSize(820,880)
        # 함수연결
        self.upper_on1.clicked.connect(partial(self.pub_uon, 1))
        self.upper_off1.clicked.connect(partial(self.pub_uoff, 1))
        self.lower_onoff1.clicked.connect(partial(self.pub_lonoff, 1))
        self.led1 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status1.addWidget(self.led1)

        self.upper_on2.clicked.connect(partial(self.pub_uon, 2))
        self.upper_off2.clicked.connect(partial(self.pub_uoff, 2))
        self.lower_onoff2.clicked.connect(partial(self.pub_lonoff, 2))
        self.led2 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status2.addWidget(self.led2)

        self.upper_on3.clicked.connect(partial(self.pub_uon, 3))
        self.upper_off3.clicked.connect(partial(self.pub_uoff, 3))
        self.lower_onoff3.clicked.connect(partial(self.pub_lonoff, 3))
        self.led3 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status3.addWidget(self.led3)

        self.upper_on4.clicked.connect(partial(self.pub_uon, 4))
        self.upper_off4.clicked.connect(partial(self.pub_uoff, 4))
        self.lower_onoff4.clicked.connect(partial(self.pub_lonoff, 4))
        self.led4 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status4.addWidget(self.led4)

        self.upper_on5.clicked.connect(partial(self.pub_uon, 5))
        self.upper_off5.clicked.connect(partial(self.pub_uoff, 5))
        self.lower_onoff5.clicked.connect(partial(self.pub_lonoff, 5))
        self.led5 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status5.addWidget(self.led5)

        self.upper_on6.clicked.connect(partial(self.pub_uon, 6))
        self.upper_off6.clicked.connect(partial(self.pub_uoff, 6))
        self.lower_onoff6.clicked.connect(partial(self.pub_lonoff, 6))
        self.led6 = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.status6.addWidget(self.led6)


    def pub_uon(self, num):
        client.publish(Topic + Room + str(num), "upper_on",qos=2)
        print(Topic + Room + str(num), "upper_on")

    def pub_uoff(self, num):
        client.publish(Topic + Room + str(num), "upper_off")
        print(Topic + Room + str(num), "upper_off")

    def pub_lonoff(self, num):
        client.publish(Topic + Room + str(num), "lower_onoff")
        print(Topic + Room + str(num), "lower_onoff")


def on_connect(client, userdata, flags, rc):
    if rc == 0 : print("connected OK")
    else : print("Bad connection Returned code=", rc)
def on_disconnect(client, userdata, flags, rc=0): print(str(rc))
def on_publish(client, userdata, mid): print("In on_pub callback mid= ", mid)
def on_subscribe(client, userdata, mid, granted_qos): print("subscribed: " + str(mid) + " " + str(granted_qos))

timers = [QTimer(), QTimer(), QTimer(), QTimer(), QTimer(), QTimer()]

def turn_off_led(num):
    print("valval",num)
    # myWindow.eval('led%s' % num).value = False

for t in range(len(timers)):
    print("connecting",t)
    timers[t].timeout.connect(lambda: print("asjdasda9dj9asdij9"))#turn_off_led(i+1))
    timers[t].setSingleShot(True)

def _on_btn(num):
    print("Timer Reset")
    timers[num].start(1)


def on_message(client, userdata, msg):
    str_msg = str(msg.payload.decode("utf-8"))
    if "room1_is_left_connected" in str_msg:
        myWindow.led1.value = True
        _on_btn(0)
        print("onbtn")

    elif "room2_is_left_connected" in str_msg:
        print("led2 timer 업데이트 ")
    elif "room3_is_left_connected" in str_msg:
        print("led3 timer 업데이트 ")
    elif "room4_is_left_connected" in str_msg:
        print("led4 timer 업데이트 ")
    elif "room5_is_left_connected" in str_msg:
        print("led5 timer 업데이트 ")
    elif "room6_is_left_connected" in str_msg:
        print("led6 timer 업데이트 ")
    print(str_msg,end=' ' )
    print("//read done")


def mqtt_loop(stop_obj, args):
    global client  # 이방법맞냐;;
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    client.on_publish = on_publish
    client.on_subscribe = on_subscribe
    client.on_message = on_message
    client.username_pw_set('nicobockko_choIoT', '1234')
    client.connect('broker.mqttdashboard.com', 1883)
    print("done")
    client.subscribe(Topic+Master, 2)
    # client.subscribe(Topic+Room+str(1), 2)
    client.loop_forever()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    myWindow = MyWindow()
    myWindow.setWindowTitle("gzone_control")
    myWindow.show()

    # WorkerThread
    W0 = WorkerThread.create_worker(0)
    WorkerThread.start_worker(*W0, mqtt_loop, None,
                              _finished_func=lambda: print("Finished"))

    app.exec_()



#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
//qos 1,2가 안돼 쓰벌 ㅡㅡ
// Update these with values suitable for your network.

const char* ssid = "Jm";
const char* password = "01020304";
const char* mqtt_server = "broker.mqttdashboard.com";
const char* mastertopic = "hc/ys/gz/master";
const char* slavetopic = "hc/ys/gz/room2";

//
//char charBuf[들어오는.길이() + 1];
//Incoming.toCharArray(charBuf,incoming.length() + 1);
//client.publish(mqtt_topic_pub, charBuf);


WiFiClient espClient;
PubSubClient client(espClient);
const uint16_t kIrLed = 12 ;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).  12:D6
IRsend irsend(kIrLed);  // Set the GPIO to be used to sending the message.


uint16_t upper_pjt_on[115] = {3034, 9066,  504, 1566,  504, 524,  524, 524,  524, 528,  520, 548,  498, 550,  524, 576,  524, 522,  578, 522,  526, 1566,  504, 524,  524, 524,  524, 1566,  504, 524,  524, 1566,  504, 1592,  504, 528,  574, 1540,  502, 1566,  504, 1546,  498, 548,  526, 1544,  500, 548,  526, 1540,  504, 1566,  504, 522,  526, 546,  528, 520,  580, 516,  530, 1540,  504, 524,  524, 546,  526, 1542,  504, 1544,  528, 518,  528, 524,  524, 1564,  506, 1542,  526, 1540,  506, 526,  544, 1540,  506, 524,  524, 1564,  508, 1540,  526, 522,  528, 520,  528, 520,  528, 546,  502, 546,  528, 520,  530, 518,  528, 572,  528, 1564,  506, 1544,  526, 1538,  506, 1562,  456};  // UNKNOWN 8694C6D8
uint16_t upper_pjt_off[231] = {2998, 9086,  480, 1582,  488, 540,  508, 566,  482, 616,  538, 566,  482, 560,  488, 564,  484, 584,  488, 542,  506, 1562,  480, 568,  506, 566,  484, 540,  508, 564,  484, 612,  514, 1582,  488, 1556,  486, 1582,  490, 1582,  538, 1554,  490, 592,  534, 538,  510, 560,  490, 540,  506, 566,  508, 542,  508, 558,  490, 560,  488, 566,  534, 566,  482, 566,  508, 558,  490, 558,  492, 560,  488, 562,  510, 612,  514, 536,  510, 542,  530, 1552,  518, 584,  490, 1584,  538, 560,  488, 556,  492, 540,  508, 1578,  492, 558,  490, 562,  484, 584,  490, 1556,  488, 1612,  536, 540,  508, 540,  484, 588,  486, 558,  490, 564,  484, 586,  436, 1778,  2942, 9094,  484, 1578,  490, 560,  464, 588,  484, 564,  484, 612,  538, 560,  466, 588,  482, 584,  490, 542,  504, 1580,  468, 562,  494, 578,  486, 1578,  468, 564,  484, 580,  468, 582,  466, 1602,  492, 1578,  522, 1574,  492, 1578,  472, 560,  510, 1576,  468, 582,  468, 1580,  464, 1654,  518, 540,  484, 604,  468, 560,  488, 562,  486, 1600,  468, 564,  482, 584,  488, 1578,  468, 1628,  496, 578,  468, 580,  478, 576,  464, 604,  470, 564,  506, 1578,  468, 1576,  494, 584,  488, 1604,  518, 1576,  468, 606,  520, 556,  492, 562,  486, 584,  488, 556,  468, 586,  464, 604,  468, 636,  516, 556,  490, 562,  488, 1576,  520, 1574,  418};
uint16_t lower_pjt_onoff[349] = {530, 17868,  2936, 8992,  446, 546,  446, 1538,  446, 546,  446, 546,  446, 546,  444, 550,  442, 550,  442, 550,  442, 550,  442, 1562,  422, 572,  420, 572,  446, 1538,  446, 546,  446, 546,  446, 1536,  446, 1536,  446, 1538,  448, 1538,  444, 1542,  444, 550,  440, 550,  442, 572,  420, 574,  418, 574,  420, 572,  444, 548,  446, 544,  446, 544,  446, 546,  446, 546,  446, 546,  446, 546,  446, 546,  446, 546,  446, 546,  444, 548,  444, 550,  442, 550,  442, 550,  440, 574,  418, 574,  418, 572,  420, 570,  446, 546,  446, 546,  446, 546,  446, 546,  446, 544,  446, 546,  446, 546,  446, 548,  444, 1538,  446, 1540,  444, 1542,  442, 1564,  446, 3012,  2942, 8994,  420, 1564,  446, 546,  446, 546,  446, 546,  446, 544,  446, 546,  446, 544,  446, 544,  448, 544,  446, 1536,  446, 548,  444, 550,  442, 1542,  440, 572,  420, 1564,  420, 1564,  446, 1538,  448, 1536,  448, 1536,  446, 1538,  446, 546,  446, 544,  446, 546,  444, 548,  442, 550,  442, 548,  442, 548,  442, 552,  440, 572,  420, 572,  420, 572,  444, 548,  444, 548,  444, 546,  446, 544,  446, 546,  446, 546,  446, 544,  446, 546,  448, 544,  448, 546,  446, 548,  444, 550,  442, 550,  442, 550,  442, 572,  418, 572,  420, 572,  418, 572,  444, 548,  444, 546,  448, 544,  448, 546,  446, 546,  446, 544,  446, 546,  446, 3038,  2914, 8992,  448, 1538,  446, 548,  442, 550,  442, 550,  440, 550,  444, 570,  420, 572,  420, 572,  420, 572,  446, 1536,  448, 544,  446, 546,  446, 546,  446, 1536,  446, 546,  446, 1536,  448, 546,  444, 1540,  444, 1542,  442, 1564,  422, 1562,  420, 1562,  448, 1536,  448, 1536,  448, 1536,  448, 546,  446, 546,  446, 546,  446, 1538,  446, 1540,  444, 1540,  444, 550,  440, 572,  418, 572,  420, 572,  418, 574,  444, 1536,  448, 1536,  448, 1536,  448, 534,  458, 1536,  448, 1538,  448, 548,  444, 1542,  440, 1542,  442, 572,  418, 572,  420, 572,  420, 572,  446, 544,  446, 546,  446, 544,  448, 1536,  446, 1536,  446, 1536,  448, 1538,  446};  // UNKNOWN 5BB3268C

long lastMsg = 0;
char msg[50];

int value = 0;

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  digitalWrite(BUILTIN_LED, LOW); 
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  irsend.begin();
}

void setup_wifi() {

  delay(10);

  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  digitalWrite(BUILTIN_LED, LOW); 
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  
  String value = "";
  for (int i=0;i<length;i++) {
      value += (char)payload[i];
  }
  Serial.print("value is ");
  Serial.println(value);
  if(value.indexOf("upper_on")!=-1){
    Serial.println(value.indexOf("upper_on"));
    irsend.sendRaw(upper_pjt_on, 115, 38);  // Send a raw data capture at 38kHz.
    client.publish(mastertopic,"room2_done_u_on");
  }
  if(value.indexOf("upper_off")!=-1){
    Serial.println(value.indexOf("upper_off"));
    irsend.sendRaw(upper_pjt_off, 231, 38);  // Send a raw data capture at 38kHz.
    client.publish(mastertopic,"room2_done_u_off");  
  } 
  if(value.indexOf("lower_onoff")!=-1){
    Serial.println(value.indexOf("lower_onoff"));
    irsend.sendRaw(lower_pjt_onoff, 349, 38);  // Send a raw data capture at 38kHz.
    client.publish(mastertopic, "room2_done_l_onoff");
    
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    digitalWrite(BUILTIN_LED, LOW); 
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(slavetopic)) { //connect 인자는 기기 id같은것  ;
      Serial.println("connected"); 
      // Once connected, publish an announcement...
      client.publish(mastertopic,"room2_reconnected");
      // ... and resubscribe
      client.subscribe(slavetopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}
void loop() {

  if (!client.connected()) {
    digitalWrite(BUILTIN_LED, LOW); 
    reconnect();
    digitalWrite(BUILTIN_LED, HIGH); 
  }

  client.loop();

  long now = millis();
  if (now - lastMsg > 5000) {
    lastMsg = now;
    client.publish(mastertopic,"room2_is_left_connected");
  }
}
