import cv2
import numpy as np

img_color = cv2.imread("C://perspective_test1.jpg")
print(img_color)

#이미지 크기조정
ratio = 1
img_color = cv2.resize(img_color, (img_color.shape[1]//ratio, img_color.shape[0]//ratio), interpolation=cv2.INTER_LINEAR)
#바이너리화를 위한 그레이화
img_gray = cv2.cvtColor(img_color, cv2.COLOR_BGR2GRAY)

# #모폴로지
# k = cv2.getStructuringElement(cv2.MORPH_RECT,(6,6))
# #모폴로지 침식
# img_gray = cv2.erode(img_gray,k)
#
#
# #스무딩
# # smoothing
# img_gray = cv2.GaussianBlur(img_gray, (5, 5), 0.0)
# img_gray = cv2.GaussianBlur(img_gray, (5, 5), 0.0)


#쓰레시홀드 사용 바이너리화
# ret, img_binary = cv2.threshold(img_gray, 100, 255, 0)
ret, img_binary = cv2.threshold(img_gray, 0, 255, cv2.THRESH_OTSU)
# # img_gray = cv2.cornerHarris(img_gray, 5, 3, 0.04)
# corners = cv2.goodFeaturesToTrack(img_gray, 25, 0.01, 10)
# corners = np.int0(corners)
# for i in corners:
#     print(i)
#     x,y = i.ravel()
#     cv2.circle(img_color,(x,y),3,255,-1)
# print(img_gray.shape)
# # cv2.imshow("img_binary", img_binary)
# # cv2.waitKey(0)

k = cv2.getStructuringElement(cv2.MORPH_RECT,(5,5))
#모폴로지 침식 팽창
img_binary = cv2.dilate(img_binary,k)
img_binary = cv2.erode(img_binary,k)
corners = cv2.goodFeaturesToTrack(img_binary, 4, 0.01, 10)


# dst = cv2.warpPerspective(img, M, (1100,1100))

findorder = [[0,0],[img_gray.shape[1],0],[img_gray.shape[1],img_gray.shape[0]], [0, img_gray.shape[0]]]
corners = np.array([np.array(i.ravel()) for i in corners])
ordered_corners = []

for p in findorder:
    mag = np.linalg.norm((corners - p), axis=1)
    minid = np.argmin(mag)
    print("!!! ", mag, " ", minid)
    ordered_corners.append(corners[minid])

# # [x,y] 좌표점을 4x2의 행렬로 작성
# # 좌표점은 좌상->좌하->우상->우하
# pts1 = np.float32([[504,1003],[243,1525],[1000,1000],[1280,1685]])
#
# # 좌표의 이동점
# pts2 = np.float32([[10,10],[10,1000],[1000,10],[1000,1000]])
#
# # pts1의 좌표에 표시. perspective 변환 후 이동 점 확인.
# cv2.circle(img, (504,1003), 20, (255,0,0),-1)
# cv2.circle(img, (243,1524), 20, (0,255,0),-1)
# cv2.circle(img, (1000,1000), 20, (0,0,255),-1)
# cv2.circle(img, (1280,1685), 20, (0,0,0),-1)

#변환매트릭스를 얻었따
M = cv2.getPerspectiveTransform(np.float32(ordered_corners), np.float32(findorder))
print(M)
dst = cv2.warpPerspective(img_color, M, img_gray.shape[::-1])
cv2.imshow('111', dst)
cv2.waitKey(0)
# for i in corners:
#     print(i)
#     x,y = i.ravel()
#     cv2.circle(img_color,(x,y),3,255,-1)
#     cv2.imshow('111', img_color)
#     cv2.waitKey(0)

# cv2.imshow('111', img_color)

#
#
# #컨투어
# contours, hierarchy = cv2.findContours(img_binary, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
#
#
# # for cnt in contours:
#
#
# print(len(contours))
# for cnt in contours:
#     area = cv2.contourArea(cnt)
#     if area <10000 : continue
#
#     print(area)
#     cv2.drawContours(img_color, [cnt], 0, (0, 255, 0), 1)  # blue
#
#     # M = cv2.moments(cnt)
#     # if M['m00']==0 : continue
#     # cx = int(M['m10'] / M['m00'])
#     # cy = int(M['m01'] / M['m00'])
#     # cv2.circle(img_color, (cx, cy), 2, (0, 0, 255), -1)
#     # print(cy,cx)
# cv2.imshow("result", img_color)

cv2.waitKey(0)
