import re

txt='Hi there, Nice to meet you. And Hello there and hi.' \
  'I love grey(gray) color not a gry, graay and graaay. grdy' \
  'Ya ya YaYaYa Ya' \
  'abcdefghijklmnopqrstuvwxyz' \
  'ABSCEFGHIJKLMNOPQRSTUVWZYZ' \
  '1234567890' \
  '.[]{}()\^$|?*+' \
  '010-898-0893' \
  '010 898 0893' \
  '010.898.8934' \
  '010-405-3412' \
  '02-878-8888\n' \
  'dream.coder.ellie@gmail.com\n'\
  'hello@daum.net\n' \
  'hello@daum.co.kr\n' \
  'http://www.youtu.be/-ZClicWm0zM\n' \
  'https://www.youtu.be/-ZClicWm0zM\n' \
  'https://youtu.be/-ZClicWm0zM\n' \
  'youtu.be/-ZClicWm0zM'


def print_re_result(p):
    try:
        m = p.match(txt) #문자열 시작부터 일치하는패턴이 있어야 반환함 (낱개)
        print("m.group() :", m.group())
        print("m.span() :",m.span())
    except Exception as e:
        print("p.match(txt) could be None :",e)

    try:
        s = p.search(txt) #문자열 시작부터가 아니어도 일치하는패턴이면 반환함 (낱개)
        print("s.group() :", s.group())
        print("s.span() :",s.span())
    except Exception as e:
        pass
    try:
        fa = p.findall(txt)
        print("p.findall(txt) :",fa)
        # fi = p.finditer(txt) #이터레이터로 반환
        # for i in fi:
        #     print(i)
    except Exception as e:
        pass


#\s 는 정규표현식에서 공백이라는의미
# re.compile(('a.b'),re.DOTALL) #.에 개행문자 포함 S
# re.compile('[a-z]',re.IGNORECASE) #I
# re.compile('[a-z]',re.MULTILINE) #M
# re.compile('[a-z]',re.VERBOSE) #X

# p = re.compile('(Hi|Hello)|(And)')
# p = re.compile('(Hi|Hello)|(And)')
# p = re.compile('(Hi|Hello)|(And)')
p = re.compile('Hi')
p = re.compile('(Hi)')
p = re.compile('(Hello)|(Hi)')
p = re.compile('(Hello|Hi)|(And)')
p = re.compile('gr(e|a)y')#gr로 시작하면서 y 사이에있는 e,a를 찾아줌
p = re.compile('gr(?:e|a)y',re.M) #gr로 시작하면서 e,a 문자가 있고 y로 종료되는 단어를찾아줌...?    ?:는 찾지만기억하지않음?ㅡㅡ
p = re.compile('gr[ea]y')
p = re.compile('[^a-zA-z0-9]')
p = re.compile('[a-zA-z0-9]')

# 문자뒤에 ? 가오면 그 문자가 없거나 있을 때
# 문자뒤에 * 가오면 그 문자가 없거나 있거나 많을 때
# 문자뒤에 + 가오면 그 문자가 있거나 많을 때
# 문자뒤에 {정수1} 가오면 그 문자가 정수 갯수 만큼 있을떄
# 문자뒤에 {정수1,정수2} 가오면 그 문자가 정수 갯수 만큼 있을떄
# 문자뒤에 {정수1,} 가오면 그 문자가 정수 이상 있을떄

# \b문자  하면 문자를 찾을건데 어떤 단어 앞에 쓰이는 문자만 찾아줌 (boundary)(띄어쓰기기준인듯)
# \B문자  하면 문자를 찾을건데 어떤 단어 앞에 쓰이지 않는 문자만 찾아줌 (boundary)(띄어쓰기기준인듯)
# 문자\b  하면 문자를 찾을건데 어떤 단어 뒤에 쓰이는 문자만 찾아줌 (boundary)
# 문자\B  하면 문자를 찾을건데 어떤 단어 뒤에 쓰이지 않는 문자만 찾아줌 (boundary)
# ^ 문장의 시작
# $ 문장의 끝

# \ 특수문자가 아닌 문자??... ?문자를 찾고싶으면 \[?] 이렇게...
# . 어떤 글자(줄바꿈제외)
# \d 숫자
# \D 숫자아님
# \w 단어
# \W word 단어아님
# \s space 공백
# \S space 공백아님

p = re.compile('\[\]')
p = re.compile('\d')
p = re.compile('\W')
p = re.compile('\s')


p = re.compile('\d\d\d-\d\d\d-\d\d\d\d',re.M)
p = re.compile('\d{2,3}[-. ]\d{3}[-. ]\d{4}')
p = re.compile('[0-9]+[-. ][0-9]+[-. ][0-9]+',re.M) #시행착오
p = re.compile('[0-9]{2,3}[-. ][0-9]{3,4}[-. ][0-9]{4}',re.M)

p = re.compile('\w+@\w+.\w+',re.M)
p = re.compile('[a-zA-Z0-9._+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9.]+',re.M)

p = re.compile('https*://[a-z.]+\/([a-zA-Z0-9-]+)',re.M)
p = re.compile('(https?://)?(www.)?youtu.be/([a-zA-Z0-9-]{11})',re.M)
p = re.compile('(?:https?://)?(?:www.)?youtu.be/([a-zA-Z0-9-]{11})',re.M)



print_re_result(p)
