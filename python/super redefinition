Python 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 24 2018, 00:16:47) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> import numpy as np
>>> 
>>> np.c_[1,2,3,4,5]
array([[1, 2, 3, 4, 5]], dtype=int32)
>>> x = _
>>> x.shap
Traceback (most recent call last):
  File "<pyshell#4>", line 1, in <module>
    x.shap
AttributeError: 'numpy.ndarray' object has no attribute 'shap'
>>> x.shape
(1, 5)
>>> np.c_[1,2],[3,4,5]]
SyntaxError: invalid syntax
>>> np.c_[[1,2],[3,4,5]]
Traceback (most recent call last):
  File "<pyshell#7>", line 1, in <module>
    np.c_[[1,2],[3,4,5]]
  File "C:\Program Files\Python36\lib\site-packages\numpy\lib\index_tricks.py", line 406, in __getitem__
    res = self.concatenate(tuple(objs), axis=axis)
  File "<__array_function__ internals>", line 6, in concatenate
ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 2 and the array at index 1 has size 3
>>> np.c_[[1,2],[3,4]]
array([[1, 3],
       [2, 4]])
>>> _.shape
(2, 2)
>>> np.c_[[1,2],[3,4], [5,2]]
array([[1, 3, 5],
       [2, 4, 2]])
>>> np.c_[[1,2,[1]],[3,4,[1]], [5,2,[1]]]

Warning (from warnings module):
  File "C:\Program Files\Python36\lib\site-packages\numpy\core\_asarray.py", line 83
    return array(a, dtype, copy=False, order=order)
VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray

Warning (from warnings module):
  File "C:\Program Files\Python36\lib\site-packages\numpy\lib\index_tricks.py", line 387
    newobj = array(item, copy=False, subok=True, ndmin=ndmin)
VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
array([[1, 3, 5],
       [2, 4, 2],
       [list([1]), list([1]), list([1])]], dtype=object)
>>> np.ones(10)
array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
>>> 
>>> 
>>> 

>>> pts = [[1,2], [3,4], [5,6]]
>>> np.c_[pts]
array([[1, 2],
       [3, 4],
       [5, 6]])
>>> np.c_[pts, np.ones(len(pts))]
array([[1., 2., 1.],
       [3., 4., 1.],
       [5., 6., 1.]])
>>> _.T
array([[1., 3., 5.],
       [2., 4., 6.],
       [1., 1., 1.]])
>>> np.c_[pts, pts]
array([[1, 2, 1, 2],
       [3, 4, 3, 4],
       [5, 6, 5, 6]])
>>> np.repeat(1, 10)
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
>>> np.repeat(5, 10)
array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5])
>>> np.repeat(5, 100).reshape(10, 10)
array([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])
>>> np.c_[pts, np.ones(len(pts))]
array([[1., 2., 1.],
       [3., 4., 1.],
       [5., 6., 1.]])
>>> r =
SyntaxError: invalid syntax
>>> r =_
>>> r
array([[1., 2., 1.],
       [3., 4., 1.],
       [5., 6., 1.]])
>>> r = r.T
>>> r
array([[1., 3., 5.],
       [2., 4., 6.],
       [1., 1., 1.]])
>>> r = r.T
>>> r
array([[1., 2., 1.],
       [3., 4., 1.],
       [5., 6., 1.]])
>>> r[:]
array([[1., 2., 1.],
       [3., 4., 1.],
       [5., 6., 1.]])
>>> r[:, :2]
array([[1., 2.],
       [3., 4.],
       [5., 6.]])
>>> 
>>> 
>>> 
>>> class A:
	def abc(self, a, b):
		return a + b

	
>>> z = A()
>>> z.abc(10, 20)
30
>>> def new_abc(a, b):
	return a * b
z.abc = new_abc
SyntaxError: invalid syntax
>>> z
<__main__.A object at 0x00000217E0127588>
>>> 
>>> 
>>> new_abc(20, 20)
Traceback (most recent call last):
  File "<pyshell#49>", line 1, in <module>
    new_abc(20, 20)
NameError: name 'new_abc' is not defined
>>> def new_abc(a, b):
	return a * b

>>> new_abc(20, 30)
600
>>> 
>>> 
>>> z.abc = new_abc
>>> z.abc(10, 20)
200
>>> 
>>> 
>>> class B(A):
	def abc(a, b):
		v = super().abc(a, b)
		new_val = v + (a * b)
		print("NEW ABC")
		return new_val

	
>>> class B(A):
	def abc(a, b):
		v = super().abc(a, b)
		new_val = v + (a * b)
		print("NEW ABC")
		return new_val

	
>>> zz = B()
>>> zz.abc(10, 20)
Traceback (most recent call last):
  File "<pyshell#71>", line 1, in <module>
    zz.abc(10, 20)
TypeError: abc() takes 2 positional arguments but 3 were given
>>> class B(A):
	def abc(self, a, b):
		v = super().abc(a, b)
		new_val = v + (a * b)
		print("NEW ABC")
		return new_val

	
>>> zz = B()
>>> zz.abc(10, 20)
NEW ABC
230
>>> class A:
	def abc(self, a, b):
		print(a)

		
>>> class B(A): #새로정의하려면 이름달라져야함  모듈을불러온꼴이였으면 같아도됨
	def abc(self, a, b):
		
		print(b)

		
>>> x = B()
>>> b.abc(10, 20)
Traceback (most recent call last):
  File "<pyshell#83>", line 1, in <module>
    b.abc(10, 20)
NameError: name 'b' is not defined
>>> x.abc(10, 20)
20
>>> class B(A): #새로정의하려면 이름달라져야함  모듈을불러온꼴이였으면 같아도됨
	def abc(self, a, b):
		super().abc(a,b)
		print(b)

		
>>> z=B()
>>> z.abc(10,20)
10
20
>>> #함수를 재정의할떄 드래그하는데서 수퍼 안쓴이유는 함수가아무것도없어서 뭐,,정확히는 시그널슬롯 부모가 하는짓이없는데 
